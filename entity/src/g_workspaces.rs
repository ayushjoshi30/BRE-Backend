//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "g_workspaces")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub identifier: String,
    #[sea_orm(unique)]
    pub organisation_name: String,
    #[sea_orm(column_type = "Text")]
    pub organisation_address: String,
    #[sea_orm(unique)]
    pub organisation_email: String,
    pub auth_key: String,
    pub base_url: String,
    #[sea_orm(column_type = "Text")]
    pub organization_logo: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::g_appusers::Entity")]
    GAppusers,
    #[sea_orm(has_many = "super::g_audittrail::Entity")]
    GAudittrail,
    #[sea_orm(has_many = "super::g_rules::Entity")]
    GRules,
}

impl Related<super::g_appusers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GAppusers.def()
    }
}

impl Related<super::g_audittrail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GAudittrail.def()
    }
}

impl Related<super::g_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GRules.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
