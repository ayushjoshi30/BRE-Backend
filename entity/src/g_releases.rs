//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use chrono::NaiveDateTime;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel,Serialize,Deserialize, Eq)]
#[sea_orm(table_name = "g_releases")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub version: String,
    #[serde(default)]
    pub workspace_id:i32,
    #[serde(default)]
    pub file_path: String,
    #[sea_orm(column_type = "JsonBinary")]
    #[serde(default)]
    pub file_json: Json,
    #[serde(default = "current_time")]
    pub created_at: DateTime,
    #[serde(default)]
    pub is_released: bool,
    #[serde(default)]
    pub released_date: DateTime,
    #[serde(default)]
    pub created_by_user: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::g_appusers::Entity",
        from = "Column::CreatedByUser",
        to = "super::g_appusers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GAppusers,
    #[sea_orm(
        belongs_to = "super::g_workspaces::Entity",  
        from = "Column::WorkspaceId",
        to = "super::g_workspaces::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GWorkspaces,
}
fn current_time() -> NaiveDateTime {
    chrono::Utc::now().naive_utc()
}
impl Related<super::g_appusers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GAppusers.def()
    }
}
impl Related<super::g_workspaces::Entity> for Entity {  // Added relation implementation for GRules
    fn to() -> RelationDef {
        Relation::GWorkspaces.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}
