//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "g_appusers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub user_name: String,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(unique)]
    pub mobile_no: String,
    pub created_on_date: DateTime,
    pub workspace_id: i32,
    pub is_active: bool,
    pub is_deleted: bool,
    pub last_login: DateTime,
    pub password: String,
    pub is_admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::g_audittrail::Entity")]
    GAudittrail,
    #[sea_orm(has_many = "super::g_releases::Entity")]
    GReleases,
    #[sea_orm(has_many = "super::g_rules::Entity")]
    GRules,
    #[sea_orm(
        belongs_to = "super::g_workspaces::Entity",
        from = "Column::WorkspaceId",
        to = "super::g_workspaces::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GWorkspaces,
}

impl Related<super::g_audittrail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GAudittrail.def()
    }
}

impl Related<super::g_releases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GReleases.def()
    }
}

impl Related<super::g_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GRules.def()
    }
}

impl Related<super::g_workspaces::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GWorkspaces.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
